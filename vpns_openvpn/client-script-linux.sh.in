#!/bin/bash

g_openvpn_client() {
    local DNS_TYPE=""
    if [ -e /etc/resolv.conf ] ; then
        if ! grep -q "# Generated by resolvconf" /etc/resolv.conf ; then
            DNS_TYPE="resolvconf"
        elif [ -L /etc/resolv.conf ] ; then
            DNS_TYPE="systemd-resolved"
        fi
    fi
    if [ "$DNS_TYPE" == "" ] ; then
        echo "/etc/resolv.conf must be generated by resolvconf or systemd-resolved."
        exit 1
    fi

    local OVPN_DIR=/etc/openvpn/wrtd-vpnc
    if [ "${INSTANCE}" != "" ] ; then
        OVPN_DIR="${OVPN_DIR}-${INSTANCE}"
    fi
    if [[ ! -d ${OVPN_DIR} ]] ; then
        mkdir -p ${OVPN_DIR}
    fi

    local CA_CERT_FILE=${OVPN_DIR}/ca-cert.pem
    local CERT_FILE=${OVPN_DIR}/cert.pem
    local KEY_FILE=${OVPN_DIR}/key.pem
    local AUTH_FILE=${OVPN_DIR}/auth.pw
    local SCRIPT_FILE=${OVPN_DIR}/hostname2username.sh
    local SCRIPT_FILE_2=${OVPN_DIR}/set-http-proxy.sh
    local SCRIPT_FILE_3=${OVPN_DIR}/remove-proxy.sh
    local CFG=${OVPN_DIR}/config.ovpn

    echo "$CA_CERT" > $CA_CERT_FILE
    chmod 644 $CA_CERT_FILE

    echo "$CERT" > $CERT_FILE
    chmod 644 $CERT_FILE

    echo "$KEY" > $KEY_FILE
    chmod 600 $KEY_FILE

    echo "$(hostname)" > $AUTH_FILE
    echo "none" >> $AUTH_FILE
    chmod 600 $AUTH_FILE

    echo "client" > $CFG
    echo "" >> $CFG
    echo "remote $HOSTNAME $PORT" >> $CFG
    echo "proto $PROTO" >> $CFG
    echo "" >> $CFG
    echo "dev tap" >> $CFG
    echo "" >> $CFG
    echo "ca $CA_CERT_FILE" >> $CFG
    echo "cert $CERT_FILE" >> $CFG
    echo "key $KEY_FILE" >> $CFG
    echo "" >> $CFG
    echo "auth-user-pass $AUTH_FILE" >> $CFG
    echo "#auth-nocache" >> $CFG
    echo "" >> $CFG
    echo "persist-key" >> $CFG
    echo "persist-tun" >> $CFG
    echo "" >> $CFG
    echo "user nobody" >> $CFG
    echo "group nobody" >> $CFG
    echo "" >> $CFG
    echo "script-security 2" >> $CFG
    if [ $DNS_TYPE == "resolvconf" ] ; then
        echo "up ${OVPN_DIR}/update-resolv-conf.sh" >> $CFG
        echo "down ${OVPN_DIR}/update-resolv-conf.sh" >> $CFG
    elif [ $DNS_TYPE == "systemd-resolved" ] ; then
        echo "up ${OVPN_DIR}/update-systemd-resolved.sh" >> $CFG
        echo "down ${OVPN_DIR}/update-systemd-resolved.sh" >> $CFG
    fi
    echo "down-pre" >> $CFG
    chmod 644 $CFG

    if [ $DNS_TYPE == "resolvconf" ] ; then
        echo "$UPDATE_RESOLV_CONF_SH_CONTENT" > ${OVPN_DIR}/update-resolv-conf.sh
        chmod 755 ${OVPN_DIR}/update-resolv-conf.sh
    elif [ $DNS_TYPE == "systemd-resolved" ] ; then
        echo "$UPDATE_SYSTEMD_RESOLVED_SH_CONTENT" > ${OVPN_DIR}/update-systemd-resolved.sh
        chmod 755 ${OVPN_DIR}/update-systemd-resolved.sh
    fi

    echo '#!/bin/sh' > $SCRIPT_FILE
    echo '' >> $SCRIPT_FILE
    echo '# use hostname as username' >> $SCRIPT_FILE
    echo "sed -i \"1s/.*/\$(hostname)/\" $AUTH_FILE" >> $SCRIPT_FILE
    chmod 700 $SCRIPT_FILE

    echo '#!/bin/sh' > $SCRIPT_FILE_2
    echo '' >> $SCRIPT_FILE_2
    echo 'IP=$1' >> $SCRIPT_FILE_2
    echo 'PORT=$2' >> $SCRIPT_FILE_2
    echo '' >> $SCRIPT_FILE_2
    echo 'if [[ "$IP" == "" || "$PORT" == "" ]] ; then' >> $SCRIPT_FILE_2
    echo '    echo "Usage: $0 <proxy-ip> <proxy-port>"' >> $SCRIPT_FILE_2
    echo '    exit 1' >> $SCRIPT_FILE_2
    echo 'fi' >> $SCRIPT_FILE_2
    echo '' >> $SCRIPT_FILE_2
    echo "if grep -q ^http-proxy $CFG ; then" >> $SCRIPT_FILE_2
    echo '    echo "Error: Proxy already set."' >> $SCRIPT_FILE_2
    echo '    exit 1' >> $SCRIPT_FILE_2
    echo 'fi' >> $SCRIPT_FILE_2
    echo '' >> $SCRIPT_FILE_2
    echo "if ! grep -qv \"^proto tcp\" $CFG ; then" >> $SCRIPT_FILE_2
    echo '    echo "Error: Only TCP protocol is supported."' >> $SCRIPT_FILE_2
    echo '    exit 1' >> $SCRIPT_FILE_2
    echo 'fi' >> $SCRIPT_FILE_2
    echo '' >> $SCRIPT_FILE_2
    echo "sed -r \"s/proto (.*)/proto \\1\\nhttp-proxy \$IP \$PORT/\" -i $CFG" >> $SCRIPT_FILE_2
    chmod 700 $SCRIPT_FILE_2

    echo '#!/bin/sh' > $SCRIPT_FILE_3
    echo '' >> $SCRIPT_FILE_3
    echo "sed -r \"/^http-proxy .*/d\" -i $CFG" >> $SCRIPT_FILE_3
    chmod 700 $SCRIPT_FILE_3

    echo "OpenVPN connection created at ${OVPN_DIR}."
}

g_openvpn_networkmanager() {
    local CONN_DIR=/etc/NetworkManager/system-connections

    local VPN_DIR=$CONN_DIR/wrtd-vpn
    local CONN_FILE=$CONN_DIR/vpn\(wrtd-vpn\)
    if [ "${INSTANCE}" != "" ] ; then
        VPN_DIR=${VPN_DIR}-${INSTANCE}
        CONN_FILE=$CONN_DIR/vpn\(wrtd-vpn-${INSTANCE}\)
    fi
    if [[ ! -d $VPN_DIR ]] ; then
        mkdir -p $VPN_DIR
        chmod 700 $VPN_DIR
    fi

    local CA_CERT_FILE=$VPN_DIR/ca-cert.pem
    local CERT_FILE=$VPN_DIR/cert.pem
    local KEY_FILE=$VPN_DIR/key.pem
    local SCRIPT_FILE=$VPN_DIR/hostname2username.sh
    local SCRIPT_FILE_2=$VPN_DIR/set-http-proxy.sh
    local SCRIPT_FILE_3=$VPN_DIR/remove-proxy.sh

    echo "$CA_CERT" > $CA_CERT_FILE
    chmod 600 $CA_CERT_FILE

    echo "$CERT" > $CERT_FILE
    chmod 600 $CERT_FILE

    echo "$KEY" > $KEY_FILE
    chmod 600 $KEY_FILE

    echo "[connection]" > $CONN_FILE
    if [ "${INSTANCE}" != "" ] ; then
        echo "id=vpn(wrtd-vpn-${INSTANCE})" >> $CONN_FILE
    else
        echo "id=vpn(wrtd-vpn)" >> $CONN_FILE
    fi
    echo "uuid=$(gen_uuid)" >> $CONN_FILE
    echo "type=vpn" >> $CONN_FILE
    echo "" >> $CONN_FILE
    echo "[vpn]" >> $CONN_FILE
    echo "service-type=org.freedesktop.NetworkManager.openvpn" >> $CONN_FILE
    echo "remote=$HOSTNAME" >> $CONN_FILE
    if [ "$proto" == "tcp" ] ; then
        echo "proto-tcp=yes" >> $CONN_FILE
    fi
    echo "port=$PORT" >> $CONN_FILE
    echo "connection-type=password-tls" >> $CONN_FILE
    echo "username=$(hostname)" >> $CONN_FILE
    echo "password-flags=0" >> $CONN_FILE
    echo "dev-type=tap" >> $CONN_FILE
    echo "dev=vpnc" >> $CONN_FILE
    echo "ca=$CA_CERT_FILE" >> $CONN_FILE
    echo "cert=$CERT_FILE" >> $CONN_FILE
    echo "key=$KEY_FILE" >> $CONN_FILE
    echo "cert-pass-flags=0" >> $CONN_FILE
    echo "#remote-cert-tls=server" >> $CONN_FILE
    echo "" >> $CONN_FILE
    echo "[vpn-secrets]" >> $CONN_FILE
    echo "password=none" >> $CONN_FILE                    # NetworkManager force a password here
    echo "" >> $CONN_FILE
    echo "[ipv4]" >> $CONN_FILE
    echo "method=auto" >> $CONN_FILE
    echo "never-default=true" >> $CONN_FILE
    echo "" >> $CONN_FILE
    echo "[ipv6]" >> $CONN_FILE
    echo "method=ignore" >> $CONN_FILE
    chmod 600 $CONN_FILE

    echo "#!/bin/sh" > $SCRIPT_FILE
    echo "" >> $SCRIPT_FILE
    echo "# use hostname as username" >> $SCRIPT_FILE
    echo "sed -i \"s/username=.*/username=\$(hostname)/g\" $CONN_FILE" >> $SCRIPT_FILE
    chmod 700 $SCRIPT_FILE

    echo '#!/bin/sh' > $SCRIPT_FILE_2
    echo '' >> $SCRIPT_FILE_2
    echo 'IP=$1' >> $SCRIPT_FILE_2
    echo 'PORT=$2' >> $SCRIPT_FILE_2
    echo 'USERNAME=$3' >> $SCRIPT_FILE_2
    echo 'PASSWORD=$4' >> $SCRIPT_FILE_2
    echo '' >> $SCRIPT_FILE_2
    echo 'if [[ "$IP" == "" || "$PORT" == "" || ( "$USERNAME" == "" && "$PASSWORD" != "" ) ]] ; then' >> $SCRIPT_FILE_2
    echo '    echo "Usage: $0 <proxy-ip> <proxy-port> [username [password]]"' >> $SCRIPT_FILE_2
    echo '    exit 1' >> $SCRIPT_FILE_2
    echo 'fi' >> $SCRIPT_FILE_2
    echo '' >> $SCRIPT_FILE_2
    echo "if grep -q ^proxy-type= $CONN_FILE ; then" >> $SCRIPT_FILE_2
    echo '    echo "Error: Proxy already set."' >> $SCRIPT_FILE_2
    echo '    exit 1' >> $SCRIPT_FILE_2
    echo 'fi' >> $SCRIPT_FILE_2
    echo '' >> $SCRIPT_FILE_2
    echo "if ! grep -q \"^proto-tcp=yes\" $CONN_FILE ; then" >> $SCRIPT_FILE_2
    echo '    echo "Error: Only TCP protocol is supported."' >> $SCRIPT_FILE_2
    echo '    exit 1' >> $SCRIPT_FILE_2
    echo 'fi' >> $SCRIPT_FILE_2
    echo '' >> $SCRIPT_FILE_2
    echo "sed -r \"s/cert-pass-flags=(.*)/cert-pass-flags=\\1\\nproxy-type=http\\nproxy-server=\$IP\\nproxy-port=\$PORT\\nproxy-retry=yes/\" -i $CONN_FILE" >> $SCRIPT_FILE_2
    echo 'if [ "$USERNAME" != "" ] ; then' >> $SCRIPT_FILE_2
    echo "    sed -r \"s/proxy-retry=yes/proxy-retry=yes\nhttp-proxy-username=\$USERNAME/\" -i $CONN_FILE" >> $SCRIPT_FILE_2
    echo 'fi' >> $SCRIPT_FILE_2
    echo 'if [ "$PASSWORD" != "" ] ; then' >> $SCRIPT_FILE_2
    echo "    sed -r \"s/password=none/password=none\\nhttp-proxy-password=\$PASSWORD/\" -i $CONN_FILE" >> $SCRIPT_FILE_2
    echo 'fi' >> $SCRIPT_FILE_2
    chmod 700 $SCRIPT_FILE_2

    echo '#!/bin/sh' > $SCRIPT_FILE_3
    echo '' >> $SCRIPT_FILE_3
    echo "sed -r \"/^proxy-type=.*/d\" -i $CONN_FILE" >> $SCRIPT_FILE_3
    echo "sed -r \"/^proxy-server=.*/d\" -i $CONN_FILE" >> $SCRIPT_FILE_3
    echo "sed -r \"/^proxy-port=.*/d\" -i $CONN_FILE" >> $SCRIPT_FILE_3
    echo "sed -r \"/^proxy-retry=.*/d\" -i $CONN_FILE" >> $SCRIPT_FILE_3
    echo "sed -r \"/^http-proxy-username=.*/d\" -i $CONN_FILE" >> $SCRIPT_FILE_3
    echo "sed -r \"/^http-proxy-password=.*/d\" -i $CONN_FILE" >> $SCRIPT_FILE_3
    chmod 700 $SCRIPT_FILE_3

    echo "NetworkManager openvpn connection created at ${CONN_FILE}."
}

g_openvpn_wrtd() {
    echo "not supported yet."
}

gen_uuid() {
    # a simple and dirty uuid generator
    t=
    t=${t}$(printf "%04x" $RANDOM)
    t=${t}$(printf "%04x" $RANDOM)
    t=${t}-
    t=${t}$(printf "%04x" $RANDOM)
    t=${t}-
    t=${t}$(printf "%04x" $RANDOM)
    t=${t}-
    t=${t}$(printf "%04x" $RANDOM)
    t=${t}-
    t=${t}$(printf "%04x" $RANDOM)
    t=${t}$(printf "%04x" $RANDOM)
    t=${t}$(printf "%04x" $RANDOM)
    echo $t
}

usage() {
    echo "Usage:"
    echo "  $0 help"
    echo "  $0 <client-program>    options are \"openvpn\", \"networkmanager\" and \"wrtd-wvpn\""
}

INSTANCE='@instance@'
HOSTNAME='@hostname@'
CA_CERT='@ca_cert@'
CERT='@client_cert@'
KEY='@client_key@'
PROTO='@proto@'
PORT='@port@'
UPDATE_RESOLV_CONF_SH_CONTENT='@update_resolv_conf_sh@'
UPDATE_SYSTEMD_RESOLVED_SH_CONTENT='@update_systemd_resolved_sh@'

if [ "$(id -u)" != "0" ] ; then
    echo "Superuser access is required."
    exit 1
fi

if [ "$1" == "help" ] ; then
    usage
    exit 1
fi

if [ "$1" == "openvpn" ] ; then
    g_openvpn_client
    exit 0
fi

if [ "$1" == "networkmanager" ] ; then
    g_openvpn_networkmanager
    exit 0
fi

if [ "$1" == "wrtd-wvpn" ] ; then
    g_openvpn_wrtd
    exit 0
fi

usage
exit 1
